#include "computing_the_value_of_pi.h"

#include <random>

/**
 * @brief The idea of Monte Carlo simulation to determine the value of PI is:
 * the area of a circle with diameter d is PI * d^2 / 4 and the area of a
 * square that has the length of its sides equal to d is d^2. If we divide the
 * two we get PI/4.
 *
 * If we put the circle inside the square and generate random numbers uniformly
 * distributed within the square, then the count of numbers in the circle
 * should be directly proportional to the circle area, and the count of numbers
 * inside the square should be directly proportional to the squareâ€™s area. That
 * means that dividing the total number of hits in the square and circle should
 * give PI/4.
 *
 * In current implementation, randoms are generated by linear congruential
 * algorithm, others are Mersenne twister algorithm and lagged Fibonacci
 * algorithm, see https://en.cppreference.com/w/cpp/numeric/random
 *
 * @param samples
 * @return double
 */
double compute_pi(int samples)
{
    std::random_device rd;
    std::minstd_rand engine(rd());
    std::uniform_real_distribution<double> distribution{0.0, 1.0};
    int hit = 0;

    for (int i = 0; i < samples; i++)
    {
        double x = distribution(engine), y = distribution(engine);
        if (y <= std::sqrt(1 - std::pow(x, 2)))
        {
            hit += 1;
        }
    }

    return 4.0 * hit / samples;
}
